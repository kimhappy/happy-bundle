cmake_minimum_required ( VERSION 3.14 )

project ( happy-bundle
  VERSION   1.0.0
  LANGUAGES CXX
)

set ( CMAKE_EXPORT_COMPILE_COMMANDS ON )

function ( happy_bundle HAPPY_BUNDLE_TARGET_NAME )
  cmake_parse_arguments ( HAPPY_BUNDLE "" "HEADER_NAME;NAMESPACE" "FILES" ${ARGN} )

  if ( NOT HAPPY_BUNDLE_HEADER_NAME )
    message ( FATAL_ERROR "happy_bundle: HEADER_NAME must be specified" )
  endif ()

  if ( NOT HAPPY_BUNDLE_NAMESPACE )
    message ( FATAL_ERROR "happy_bundle: NAMESPACE must be specified" )
  endif ()

  if ( NOT HAPPY_BUNDLE_FILES )
    message ( FATAL_ERROR "happy_bundle: at least one file must be listed in FILES" )
  endif ()

  set ( HAPPY_BUNDLE_OUT "${CMAKE_CURRENT_BINARY_DIR}/${HAPPY_BUNDLE_TARGET_NAME}/${HAPPY_BUNDLE_HEADER_NAME}" )
  set ( HAPPY_BUNDLE_ABSOLUTE_FILES "" )

  foreach ( HAPPY_BUNDLE_FILE IN LISTS HAPPY_BUNDLE_FILES )
    if ( IS_ABSOLUTE "${HAPPY_BUNDLE_FILE}" )
      list ( APPEND HAPPY_BUNDLE_ABSOLUTE_FILES "${HAPPY_BUNDLE_FILE}" )
    else ()
      list ( APPEND HAPPY_BUNDLE_ABSOLUTE_FILES "${CMAKE_CURRENT_SOURCE_DIR}/${HAPPY_BUNDLE_FILE}" )
    endif ()
  endforeach ()

  set ( HAPPY_BUNDLE_FILES ${HAPPY_BUNDLE_ABSOLUTE_FILES} )
  get_filename_component ( HAPPY_BUNDLE_OUT_DIR "${HAPPY_BUNDLE_OUT}" DIRECTORY )
  file ( MAKE_DIRECTORY "${HAPPY_BUNDLE_OUT_DIR}" )

  set ( HAPPY_BUNDLE_SCRIPT "${CMAKE_CURRENT_BINARY_DIR}/${HAPPY_BUNDLE_TARGET_NAME}_generate.cmake" )

  file ( WRITE "${HAPPY_BUNDLE_SCRIPT}"
    "# auto-generated script by happy_bundle\n\n"
    "set ( HAPPY_BUNDLE_OUT         \"${HAPPY_BUNDLE_OUT}\" )\n"
    "set ( HAPPY_BUNDLE_TARGET_NAME \"${HAPPY_BUNDLE_TARGET_NAME}\" )\n"
    "set ( HAPPY_BUNDLE_NAMESPACE   \"${HAPPY_BUNDLE_NAMESPACE}\" )\n"
    "set ( HAPPY_BUNDLE_FILES       \"${HAPPY_BUNDLE_FILES}\" )\n"
    "set ( HAPPY_BUNDLE_CHUNK_SIZE  32768 )\n"
    "set ( HAPPY_BUNDLE_BATCH_SIZE  256 )\n"
    "\n"
    "file ( WRITE \"\${HAPPY_BUNDLE_OUT}\"\n"
    "  \"// auto-generated by happy_bundle\\n\\n\"\n"
    "  \"#ifndef __HAPPY_BUNDLE_\${HAPPY_BUNDLE_TARGET_NAME}_HPP__\\n\"\n"
    "  \"#define __HAPPY_BUNDLE_\${HAPPY_BUNDLE_TARGET_NAME}_HPP__\\n\"\n"
    "  \"\\n\"\n"
    "  \"#include <span>\\n\"\n"
    "  \"#include <array>\\n\"\n"
    "  \"#include <optional>\\n\"\n"
    "  \"#include <string_view>\\n\"\n"
    "  \"#include <algorithm>\\n\"\n"
    "  \"\\n\"\n"
    "  \"namespace \${HAPPY_BUNDLE_NAMESPACE} {\\n\"\n"
    "  \"  constexpr auto data(std::u8string_view const& name) noexcept -> std::optional< std::span< std::byte const > > {\\n\"\n"
    ")\n"
    "\n"
    "set ( HAPPY_BUNDLE_FILE_INFO_LIST \"\" )\n"
    "set ( HAPPY_BUNDLE_TOTAL_SIZE     0  )\n"
    "\n"
    "foreach ( HAPPY_BUNDLE_FILE IN LISTS HAPPY_BUNDLE_FILES )\n"
    "  get_filename_component ( HAPPY_BUNDLE_FILE_NAME \"\${HAPPY_BUNDLE_FILE}\" NAME )\n"
    "  file                   ( SIZE \"\${HAPPY_BUNDLE_FILE}\" HAPPY_BUNDLE_FILE_BYTE_COUNT )\n"
    "  set                    ( HAPPY_BUNDLE_FILE_START_OFFSET \${HAPPY_BUNDLE_TOTAL_SIZE} )\n"
    "  math                   ( EXPR HAPPY_BUNDLE_FILE_END_OFFSET \"\${HAPPY_BUNDLE_TOTAL_SIZE} + \${HAPPY_BUNDLE_FILE_BYTE_COUNT}\" )\n"
    "  list                   ( APPEND HAPPY_BUNDLE_FILE_INFO_LIST \"\${HAPPY_BUNDLE_FILE_NAME}:\${HAPPY_BUNDLE_FILE_START_OFFSET}:\${HAPPY_BUNDLE_FILE_END_OFFSET}\" )\n"
    "  set                    ( HAPPY_BUNDLE_TOTAL_SIZE \${HAPPY_BUNDLE_FILE_END_OFFSET} )\n"
    "endforeach ()\n"
    "\n"
    "file ( APPEND \"\${HAPPY_BUNDLE_OUT}\"\n"
    "  \"    static constexpr auto bytes = std::bit_cast< std::array< std::byte, \${HAPPY_BUNDLE_TOTAL_SIZE} > >(std::to_array< uint8_t >({ \"\n"
    ")\n"
    "\n"
    "set ( HAPPY_BUNDLE_CURRENT_CHUNK \"\" )\n"
    "\n"
    "foreach ( HAPPY_BUNDLE_FILE IN LISTS HAPPY_BUNDLE_FILES )\n"
    "  file   ( READ \"\${HAPPY_BUNDLE_FILE}\" HAPPY_BUNDLE_FILE_HEX MODE HEX )\n"
    "  string ( LENGTH \"\${HAPPY_BUNDLE_FILE_HEX}\" HAPPY_BUNDLE_FILE_HEX_LEN )\n"
    "  math   ( EXPR HAPPY_BUNDLE_FILE_BYTE_COUNT \"\${HAPPY_BUNDLE_FILE_HEX_LEN} / 2\" )\n"
    "  set    ( HAPPY_BUNDLE_FILE_INDEX 0 )\n"
    "\n"
    "  while ( \${HAPPY_BUNDLE_FILE_INDEX} LESS \${HAPPY_BUNDLE_FILE_BYTE_COUNT} )\n"
    "    math ( EXPR HAPPY_BUNDLE_REMAINING_BYTES \"\${HAPPY_BUNDLE_FILE_BYTE_COUNT} - \${HAPPY_BUNDLE_FILE_INDEX}\" )\n"
    "\n"
    "    if ( \${HAPPY_BUNDLE_REMAINING_BYTES} GREATER \${HAPPY_BUNDLE_BATCH_SIZE} )\n"
    "      set ( HAPPY_BUNDLE_CURRENT_BATCH_SIZE \${HAPPY_BUNDLE_BATCH_SIZE} )\n"
    "    else ()\n"
    "      set ( HAPPY_BUNDLE_CURRENT_BATCH_SIZE \${HAPPY_BUNDLE_REMAINING_BYTES} )\n"
    "    endif ()\n"
    "\n"
    "    math ( EXPR HAPPY_BUNDLE_HEX_START \"\${HAPPY_BUNDLE_FILE_INDEX} * 2\" )\n"
    "    math ( EXPR HAPPY_BUNDLE_HEX_LENGTH \"\${HAPPY_BUNDLE_CURRENT_BATCH_SIZE} * 2\" )\n"
    "    string ( SUBSTRING \"\${HAPPY_BUNDLE_FILE_HEX}\" \${HAPPY_BUNDLE_HEX_START} \${HAPPY_BUNDLE_HEX_LENGTH} HAPPY_BUNDLE_HEX_BATCH )\n"
    "    string ( REGEX REPLACE \"([0-9A-Fa-f][0-9A-Fa-f])\" \"0x\\\\1,\" HAPPY_BUNDLE_BATCH_DATA \"\${HAPPY_BUNDLE_HEX_BATCH}\" )\n"
    "    string ( APPEND HAPPY_BUNDLE_CURRENT_CHUNK \"\${HAPPY_BUNDLE_BATCH_DATA}\" )\n"
    "    string ( LENGTH \"\${HAPPY_BUNDLE_CURRENT_CHUNK}\" HAPPY_BUNDLE_CURRENT_CHUNK_LEN )\n"
    "\n"
    "    if ( \${HAPPY_BUNDLE_CURRENT_CHUNK_LEN} GREATER \${HAPPY_BUNDLE_CHUNK_SIZE} )\n"
    "      file ( APPEND \"\${HAPPY_BUNDLE_OUT}\" \"\${HAPPY_BUNDLE_CURRENT_CHUNK}\" )\n"
    "      set  ( HAPPY_BUNDLE_CURRENT_CHUNK \"\" )\n"
    "    endif ()\n"
    "\n"
    "    math ( EXPR HAPPY_BUNDLE_FILE_INDEX \"\${HAPPY_BUNDLE_FILE_INDEX} + \${HAPPY_BUNDLE_CURRENT_BATCH_SIZE}\" )\n"
    "  endwhile ()\n"
    "endforeach ()\n"
    "\n"
    "if ( NOT \"\${HAPPY_BUNDLE_CURRENT_CHUNK}\" STREQUAL \"\" )\n"
    "  file ( APPEND \"\${HAPPY_BUNDLE_OUT}\" \"\${HAPPY_BUNDLE_CURRENT_CHUNK}\" )\n"
    "endif ()\n"
    "\n"
    "file ( APPEND \"\${HAPPY_BUNDLE_OUT}\"\n"
    "  \" }));\\n\"\n"
    "  \"    static constexpr auto hash  = [](std::u8string_view const& str) noexcept -> std::size_t {\\n\"\n"
    "  \"      return std::ranges::fold_left(\\n\"\n"
    "  \"        str                             ,\\n\"\n"
    "  \"        static_cast< std::size_t >(5381),\\n\"\n"
    "  \"        [](auto const acc, auto const x) noexcept { return (33 * acc) ^ x; });\\n\"\n"
    "  \"    };\\n\"\n"
    "  \"\\n\"\n"
    "  \"    switch (hash(name)) {\"\n"
    ")\n"
    "\n"
    "foreach ( HAPPY_BUNDLE_FILE_INFO IN LISTS HAPPY_BUNDLE_FILE_INFO_LIST )\n"
    "  string ( REPLACE \":\" \";\" HAPPY_BUNDLE_FILE_INFO_PARTS \${HAPPY_BUNDLE_FILE_INFO} )\n"
    "  list   ( GET HAPPY_BUNDLE_FILE_INFO_PARTS 0 HAPPY_BUNDLE_FILE_NAME  )\n"
    "  list   ( GET HAPPY_BUNDLE_FILE_INFO_PARTS 1 HAPPY_BUNDLE_FILE_START )\n"
    "  list   ( GET HAPPY_BUNDLE_FILE_INFO_PARTS 2 HAPPY_BUNDLE_FILE_END   )\n"
    "\n"
    "  file ( APPEND \"\${HAPPY_BUNDLE_OUT}\"\n"
    "    \"\\n    case hash(u8\\\"\${HAPPY_BUNDLE_FILE_NAME}\\\"):\\n\"\n"
    "    \"      return std::span(bytes.data() + \${HAPPY_BUNDLE_FILE_START}, bytes.data() + \${HAPPY_BUNDLE_FILE_END});\\n\"\n"
    "  )\n"
    "endforeach ()\n"
    "\n"
    "file ( APPEND \"\${HAPPY_BUNDLE_OUT}\"\n"
    "  \"    }\\n\"\n"
    "  \"\\n\"\n"
    "  \"    return std::nullopt;\\n\"\n"
    "  \"  }\\n\"\n"
    "  \"} // namespace \${HAPPY_BUNDLE_NAMESPACE}\\n\"\n"
    "  \"\\n\"\n"
    "  \"#endif // __HAPPY_BUNDLE_\${HAPPY_BUNDLE_TARGET_NAME}_HPP__\\n\"\n"
    ")\n"
  )

  add_custom_command (
    OUTPUT  "${HAPPY_BUNDLE_OUT}"
    COMMAND "${CMAKE_COMMAND}" -P "${HAPPY_BUNDLE_SCRIPT}"
    DEPENDS ${HAPPY_BUNDLE_FILES}
    COMMENT "Generating ${HAPPY_BUNDLE_HEADER_NAME} from bundle files"
    VERBATIM
  )

  add_custom_target ( ${HAPPY_BUNDLE_TARGET_NAME}_generate
    DEPENDS
      "${HAPPY_BUNDLE_OUT}"
  )

  add_library ( ${HAPPY_BUNDLE_TARGET_NAME} INTERFACE )

  add_dependencies ( ${HAPPY_BUNDLE_TARGET_NAME} ${HAPPY_BUNDLE_TARGET_NAME}_generate )

  target_include_directories ( ${HAPPY_BUNDLE_TARGET_NAME}
    INTERFACE
      "${CMAKE_CURRENT_BINARY_DIR}/${HAPPY_BUNDLE_TARGET_NAME}"
  )

  target_compile_features ( ${HAPPY_BUNDLE_TARGET_NAME}
    INTERFACE
      cxx_std_23
  )

  target_compile_options ( ${HAPPY_BUNDLE_TARGET_NAME}
    INTERFACE
      -fconstexpr-steps=1000000000
  )
endfunction()
